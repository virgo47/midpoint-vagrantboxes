# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # base Vagrantbox we're starting with
  config.vm.box = "bento/ubuntu-20.04"
  config.vm.hostname = "mid-pg-new-repo-4-4"

  config.vm.box_check_update = false

  # multiple entries can be added, but we don't need web, and we need 8080 free on host
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # PostgreSQL
  config.vm.network "forwarded_port", guest: 5432, host: 5432
  config.vm.network "private_network", ip: "192.168.56.33"


  config.vm.provider "virtualbox" do |vb|
    #vb.gui = true
    vb.name = "mid-pg-new-repo-4-4"
    # UNCOMMENT these and config section lower for higher PG performance (stronger hosts only!)
    vb.memory = 2048
    vb.cpus = 1
  end

  config.vm.provision "shell", inline: <<-SHELL
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget -q -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo apt-get update
    sudo apt-get install -y postgresql postgresql-contrib
    sudo -i -u postgres psql -c "SELECT version();"

    # allow connections from outside (not just from localhost)
    sudo ed /etc/postgresql/*/main/postgresql.conf << EOF
# we'll find commented line with listen_addresses
/^#listen_addresses
# and then well append ('a') this after it (up to '.')
i
# Listen on all interfaces to allow connections from outside
listen_addresses = '*'
.
$
a

# load statement statistics module: https://www.postgresql.org/docs/current/pgstatstatements.html
# very low overhead, recommended at least for all non-production environments (good for prod too)
shared_preload_libraries = 'pg_stat_statements'
.
# write the file and finish
wq
EOF

# https://pgtune.leopard.in.ua/ 2GB/1CPU
# appending it is enough, later value overrides any previously mentioned one
    sudo bash -c 'cat >> /etc/postgresql/*/main/postgresql.conf' << EOF
max_connections = 100
shared_buffers = 512MB
effective_cache_size = 1536MB
maintenance_work_mem = 128MB
checkpoint_completion_target = 0.9
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200
work_mem = 1310kB
min_wal_size = 1GB
max_wal_size = 4GB

# this is to log all the queries, just be aware of the free disk space
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_statement = 'all'
log_line_prefix = '%m [%p] %h %a: '
EOF

    sudo bash -c 'cat >> /etc/postgresql/*/main/pg_hba.conf' << EOF
# Allow connections from outside (with password)
host    all             all             0.0.0.0/0            md5

EOF
    # change of configuration requires DB restart
    sudo service postgresql restart

    # initializing midpoint user, database, etc.
    sudo -i -u postgres psql -c "CREATE USER midpoint WITH PASSWORD 'password' LOGIN SUPERUSER;"
    sudo -i -u postgres psql -c "CREATE DATABASE midpoint WITH OWNER = midpoint ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1;"
    # separate audit database (optional)
    sudo -i -u postgres psql -c "CREATE USER midaudit WITH PASSWORD 'password' LOGIN SUPERUSER;"
    sudo -i -u postgres psql -c "CREATE DATABASE midaudit WITH OWNER = midaudit ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1;"
    # alternative midtest DB for automated tests
    sudo -i -u postgres psql -c "CREATE USER midtest WITH PASSWORD 'password' LOGIN SUPERUSER;"
    sudo -i -u postgres psql -c "CREATE DATABASE midtest WITH OWNER = midtest ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1;"
    # alternative midold DB for comparison with legacy repository
    sudo -i -u postgres psql -c "CREATE USER midold WITH PASSWORD 'password' LOGIN SUPERUSER;"
    sudo -i -u postgres psql -c "CREATE DATABASE midold WITH OWNER = midold ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1;"

    # let's make it easy for "vagrant" user to use psql command
    sudo bash -c 'cat >> ~vagrant/.bashrc' << EOF

export PGHOST=localhost
export PGPORT=5432
export PGDATABASE=midpoint
export PGUSER=midpoint
export PGPASSWORD=password
export PAGER="less -S"

EOF

    # repeating the initialization from above for psql below
    export PGHOST=localhost
    export PGPORT=5432
    export PGDATABASE=midpoint
    export PGUSER=midpoint
    export PGPASSWORD=password

    # importing midPoint schema - update the version as necessary
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/support-4.4/config/sql/native-new/postgres-new.sql
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/support-4.4/config/sql/native-new/postgres-new-audit.sql
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/support-4.4/config/sql/native-new/postgres-new-quartz.sql
    # old repo schema + test support db cleanup script
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/support-4.4/config/sql/generic-old/postgresql-4.4-all.sql
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/support-4.4/repo/repo-sql-impl-test/sql-procedures/postgresql.sql

    # full DB with new repo and audit+quartz tables
    psql < postgres-new.sql
    psql < postgres-new-audit.sql
    psql < postgres-new-quartz.sql
    # adding statement stats extension
    psql -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

    # test database repo+audit
    psql midtest midtest < postgres-new.sql
    psql midtest midtest < postgres-new-audit.sql
    psql midtest midtest -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

    # pure audit DB
    psql midaudit midaudit < postgres-new-audit.sql
    psql midaudit midaudit -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

    psql midold midold < postgresql-4.4-all.sql
    # importing midPoint cleanup procedure for tests
    psql midold midold < postgresql.sql
    psql midold midold -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

  SHELL
end