# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # base Vagrantbox we're starting with
  config.vm.box = "bento/ubuntu-20.04"
  config.vm.hostname = "mid-101-native-repo-openldap"

  config.vm.box_check_update = false

  # multiple entries can be added, but we don't need web, and we need 8080 free on host
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # PostgreSQL
  #config.vm.network "forwarded_port", guest: 5432, host: 5432
  config.vm.network "private_network", ip: "192.168.56.47"


  config.vm.provider "virtualbox" do |vb|
    #vb.gui = true
    vb.name = "mid-101-native-repo-openldap"
    vb.memory = 2048
    vb.cpus = 2
  end

  config.vm.provision "shell", inline: <<-SHELL
    # OpenLDAP
    sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget -q -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    apt-get update

    # for noninteractive slapd install
    export DEBIAN_FRONTEND=noninteractive
    echo -e "
slapd slapd/internal/generated_adminpw password password
slapd slapd/password2 password password
slapd slapd/internal/adminpw password password
slapd slapd/password1 password password
" | sudo debconf-set-selections
    # perl libs are important for our slapdconf tools (perl scripts)
    apt-get install -y slapd ldap-utils unzip libnet-ldap-perl libuuid-perl

    systemctl stop slapd
    mkdir -p ~/downloads && cd ~/downloads && wget https://github.com/Evolveum/slapdconf/archive/refs/heads/master.zip
    cd ~/downloads
    unzip -o master.zip
    cd ~/downloads/slapdconf-master
    ./slapdadm delete-all
    systemctl start slapd
    mkdir '/var/lib/ldap/dc=example,dc=com'
    chown openldap.openldap '/var/lib/ldap/dc=example,dc=com'
    ./slapdconf create-suffix dc=example,dc=com --dbDir '/var/lib/ldap/dc=example,dc=com' --rootPassword secret
    ldapadd -x -f /vagrant/100-example.ldif -h localhost -D cn=admin,dc=example,dc=com -w secret
    ldapadd -Y EXTERNAL -H ldapi:/// -f /vagrant/110-example-idmadmin-aci.ldif
    ldapadd -Y EXTERNAL -H ldapi:/// -f /vagrant/120-add-indexes.ldif
    ./slapdconf add-module refint
    ./slapdconf add-module memberof
    ./slapdconf add-module sssvlv
    ./slapdconf add-overlay "dc=example,dc=com" memberof olcMemberOf olcMemberOfRefInt:TRUE olcMemberOfGroupOC:groupOfNames olcMemberOfMemberAD:member olcMemberOfMemberOfAD:memberOf olcMemberOfDangling:ignore
    ./slapdconf add-overlay "dc=example,dc=com" refint olcRefintConfig 'olcRefintAttribute:memberof member manager owner'
    ./slapdconf add-overlay "dc=example,dc=com" sssvlv

    # let's test with minimum supported PG version
    sudo apt-get install -y postgresql-13 postgresql-contrib-13
    sudo -i -u postgres psql -c "SELECT version();"

    # allow connections from outside (not just from localhost)
    sudo ed /etc/postgresql/*/main/postgresql.conf << EOF
# we'll find commented line with listen_addresses
/^#listen_addresses
# and then well append ('a') this after it (up to '.')
i
# Listen on all interfaces to allow connections from outside
listen_addresses = '*'
.
$
a

# load statement statistics module: https://www.postgresql.org/docs/current/pgstatstatements.html
# very low overhead, recommended at least for all non-production environments (good for prod too)
shared_preload_libraries = 'pg_stat_statements'
.
# write the file and finish
wq
EOF

# UNCOMMENT the following section to adjust configuration for 8GB/4CPU (see config.vm.provider above)
# appending it is enough, later value overrides any previously mentioned one
    sudo bash -c 'cat >> /etc/postgresql/*/main/postgresql.conf' << EOF
max_connections = 100
shared_buffers = 512MB
effective_cache_size = 1536MB
maintenance_work_mem = 128MB
checkpoint_completion_target = 0.9
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200
work_mem = 2621kB
min_wal_size = 1GB
max_wal_size = 4GB
max_worker_processes = 2
max_parallel_workers_per_gather = 1
max_parallel_workers = 2
max_parallel_maintenance_workers = 1
EOF

    sudo bash -c 'cat >> /etc/postgresql/*/main/pg_hba.conf' << EOF
# Allow connections from outside (with password)
host    all             all             0.0.0.0/0            md5

EOF
    # change of configuration requires DB restart
    sudo service postgresql restart

    # initializing midpoint user, database, etc.
    sudo -i -u postgres psql -c "CREATE USER midpoint WITH PASSWORD 'password' LOGIN SUPERUSER;"
    sudo -i -u postgres psql -c "CREATE DATABASE midpoint WITH OWNER = midpoint ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1;"

    # let's make it easy for "vagrant" user to use psql command
    sudo bash -c 'cat >> ~vagrant/.bashrc' << EOF

export PGHOST=localhost
export PGPORT=5432
export PGDATABASE=midpoint
export PGUSER=midpoint
export PGPASSWORD=password
export PAGER="less -S"

EOF

    # repeating the initialization from above for psql below
    export PGHOST=localhost
    export PGPORT=5432
    export PGDATABASE=midpoint
    export PGUSER=midpoint
    export PGPASSWORD=password

    # importing midPoint schema - update the version as necessary
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/master/config/sql/native-new/postgres-new.sql
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/master/config/sql/native-new/postgres-new-audit.sql
    wget -q https://raw.githubusercontent.com/Evolveum/midpoint/master/config/sql/native-new/postgres-new-quartz.sql

    # full DB with new repo and audit+quartz tables
    psql -f postgres-new.sql -f postgres-new-audit.sql -f postgres-new-quartz.sql
    # adding statement stats extension
    psql -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"

  SHELL
end